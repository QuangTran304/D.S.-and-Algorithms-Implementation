 --------------------------------------------------
|   Author: Quang Tran
|   Date: April 22, 2019
|   Title: Insertion Sort
 --------------------------------------------------

Visualize:
 -----------------------
| 3 |   | 6 | 9 | 4 | 1 |
 -----------------------
      2    

 -----------------------
|   | 3 | 6 | 9 | 4 | 1 |
 -----------------------
  2    

 -----------------------
| 2 | 3 | 6 | 9 | 4 | 1 |
 -----------------------
  
* hole: The imaginary empty box when we take the number out
  and compare it with the previous values. If the previous value
  is greater, the "hole" will shift 1 unit to the left. Then 
  continue... until index of hole = 0 (the far left)



InsertionSort(array) {
    for each element in array {         // From index 1 to n-1
        value = currentElement;
        hole = index of currentElement;
        
        while (hole > 0 && element[hole - 1] > value) {
            element[hole] = element[hole - 1];      // Hole will be shifted to the left
            hole = hole - 1;                        // Update index of new hole when doing left shift
        }
        element[hole] = value;
    }
}